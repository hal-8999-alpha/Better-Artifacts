Given the following relevant files and their contents:

File: also/yo.py
Content:
from ..goodbye import say_goodbye
from ..hello import say_hello
from ..blah import say_blah

def say_yo():
    say_hello()
    print('Yo!')
    say_blah()
    print('CHANGED')
    say_blah()  # Added second call to say_blah()
    say_goodbye()
    say_goodbye()

Summary: This file defines a function that prints greetings and farewells along with some phrases.

Relevant Functions:
- say_yo: Prints a greeting 'Yo!', invokes hello and blah messages, and then says goodbye.

File: hello.py
Content:
from also.yo import say_yo

def say_hello():
    print("Hello!")
    say_yo()
    print("YEEEEEE")
    print("OOOOH YEAH")

if __name__ == "__main__":
    say_hello()

Summary: This script defines a function that prints a greeting and makes a call to another function from an external module to customize the greeting.

Relevant Functions:
- say_hello: Prints a greeting message and calls the say_yo function from the imported module.

File: main.py
Content:
from also.yo import say_yo

if __name__ == "__main__":
    say_yo()  # This will start the chain of function calls

Summary: This file is the main entry point for the application and executes the say_yo function from the also.yo module.

Relevant Functions:
- __main__: The main entry point of the script that triggers the say_yo function.

And the following file structure:
{
  "C:\\Users\\Jayson\\Better-Artifacts\\server\\projects\\test\\also\\yo.py": "file",
  "C:\\Users\\Jayson\\Better-Artifacts\\server\\projects\\test\\blah.py": "file",
  "C:\\Users\\Jayson\\Better-Artifacts\\server\\projects\\test\\goodbye.py": "file",
  "C:\\Users\\Jayson\\Better-Artifacts\\server\\projects\\test\\hello.py": "file",
  "C:\\Users\\Jayson\\Better-Artifacts\\server\\projects\\test\\main.py": "file"
}

And the user query: "Make yo call hello 3 times
"

Please analyze the code and provide:
1. An explanation of how the code relates to the query, taking into account the file structure
2. Any suggested modifications to address the query, ensuring that imports and file paths are correct given the file structure
3. The updated code for each file that needs changes
4. Include the entire code including the import statements

Pay special attention to the functions identified as relevant and the file structure when suggesting imports or calls between files.

For each new or modified Python function, start with SCRIPT_X on a new line (where X is the script number), followed by the function in a Python code block. Only respond with what the user explicitly asks for.

Return your response as a JSON object with the following structure:
{
  "explanation": "Your explanation here",
  "modifications": [
    {
      "fileName": "path/to/example.py",
      "changes": "A description of the changes made",
      "scripts": [
        {
          "name": "function_name",
          "content": "The full content of the function"
        }
      ]
    }
  ]
}