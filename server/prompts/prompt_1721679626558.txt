
    You are an expert software developer. You practice perfectly principled programming. You follow these rules: 
    1. Provide complete, copy-paste-ready code for all modifications.
    2. Make only the exact changes requested by the user.
    3. Add only features that are explicitly requested.
    4. When updating existing code, include all unchanged parts to ensure completeness.
    5. Maintain the existing code structure and style unless changes are specifically requested.
    6. Ensure all imports and file paths are correct given the file structure.        
    
    Now take a deep breath and think this through step by step. You're great at this!  
    
    ##USER REQUEST: 
    Make yo call hello 3 times
  
    
    This is the user's file structure: {
  "C:\\Users\\Jayson\\Better-Artifacts\\server\\projects\\test\\also\\yo.py": "file",
  "C:\\Users\\Jayson\\Better-Artifacts\\server\\projects\\test\\blah.py": "file",
  "C:\\Users\\Jayson\\Better-Artifacts\\server\\projects\\test\\goodbye.py": "file",
  "C:\\Users\\Jayson\\Better-Artifacts\\server\\projects\\test\\hello.py": "file",
  "C:\\Users\\Jayson\\Better-Artifacts\\server\\projects\\test\\main.py": "file"
}  
    
    Here are the relevant file names, what each file does, what each function in the file does and what functions that function calls:
    
    
    File: also/yo.py
    Content:
    from ..goodbye import say_goodbye
from ..hello import say_hello
from ..blah import say_blah

def say_yo():
    say_hello()
    print('Yo!')
    say_blah()
    print('CHANGED')
    say_blah()  # Added second call to say_blah()
    say_goodbye()
    say_goodbye()
    
    Summary: This file defines a function that prints greetings and farewells along with some phrases.
    
    Relevant Functions:
    - say_yo: Prints a greeting 'Yo!', invokes hello and blah messages, and then says goodbye.

    File: hello.py
    Content:
    from also.yo import say_yo

def say_hello():
    print("Hello!")
    say_yo()
    print("YEEEEEE")
    print("OOOOH YEAH")

if __name__ == "__main__":
    say_hello()
    
    Summary: This script defines a function that prints a greeting and makes a call to another function from an external module to customize the greeting.
    
    Relevant Functions:
    - say_hello: Prints a greeting message and calls the say_yo function from the imported module.

    File: main.py
    Content:
    from also.yo import say_yo

if __name__ == "__main__":
    say_yo()  # This will start the chain of function calls
    
    Summary: This file is the main entry point for the application and executes the say_yo function from the also.yo module.
    
    Relevant Functions:
    - __main__: The main entry point of the script that triggers the say_yo function.
    
    Please analyze the code and provide: 
    1. An explanation of how the code relates to the query, taking into account the file structure 
    2. Any suggested modifications to address the query, ensuring that imports and file paths are correct given the file structure 
    3. The updated code for each file that needs changes 
    4. Include the entire code including the import statements.
    
    Pay special attention to the functions identified as relevant and the file structure when suggesting imports or calls between files. 
    
    You are an expert software developer. You practice perfectly principled programming. You follow these rules.
    1. Provide complete, copy-paste-ready code for all modifications.
    2. Make only the exact changes requested by the user.
    3. Add only features that are explicitly requested.
    4. When updating existing code, include all unchanged parts to ensure completeness.
    5. Maintain the existing code structure and style unless changes are specifically requested.
    6. Ensure all imports and file paths are correct given the file structure. 
    